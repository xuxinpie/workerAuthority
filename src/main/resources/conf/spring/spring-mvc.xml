<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

    <!-- 默认注册 DefaultAnnotationHandleMapping以及AnnotionMethodHandleAdapter 这两个
        Bean, 这两个 Bean ，前者对应类级别， 后者对应到方法级别 -->
    <mvc:annotation-driven/>

    <!-- 扫描controller（controller层注入） 主要作用于@Controller -->
    <context:component-scan base-package="com.cnooc.core.controller"/>

    <!-- 在HandlerMapping内配置拦截器(有错误) -->
    <!-- <bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="interceptors">
            <list>
                <ref bean="handlerInterceptor1"/>
                <ref bean="handlerInterceptor2"/>
            </list>
        </property>
        <property name="mappings">
            <props>
                <prop key="/test">TestController</prop>
            </props>
        </property>
    </bean>

    <bean id="handlerInterceptor1" class="com.xinux.test.interceptor.HandlerInterceptor1"></bean>
    <bean id="handlerInterceptor2" class="com.xinux.test.interceptor.HandlerInterceptor2"></bean>
    <bean id="TestController" class="com.xinux.test.controller.TestController"></bean> -->

    <!-- <mvc:resources mapping="/static/**" location="/WEB-INF/jsp/"/> 静态资源因为没有相应的Controller就会被default
        servlet处理 <mvc:default-servlet-handler/> -->

    <!--@Controller 声明Action组件 @Service 声明Service组件 @Service("myMovieLister")
        @Repository 声明Dao组件 @Component 泛指组件, 当不好归类时. @RequestMapping("/menu") 请求映射
        @Resource 用于注入，( j2ee提供的 ) 默认按名称装配，@Resource(name="beanName") @Autowired
        用于注入，(srping提供的) 默认按类型装配 @Transactional( rollbackFor={Exception.class}) 事务管理
        @ResponseBody @Scope("prototype") 设定bean的作用域 -->

    <!-- 避免IE在ajax请求时，返回json出现下载 -->
    <bean id="jacksonMessageConverter"
          class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- 视图解析类，对模型视图民称的解析，对模型视图添加前后缀 适用于JSP-->
    <!-- <bean
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix">
            <value>/WEB-INF/jsp/</value>
        </property>
        <property name="suffix">
            <value>.jsp</value>
        </property>
    </bean> -->

    <!-- 对静态资源文件的访问,是得页面能够加载到对应的静态资源 -->
    <mvc:resources mapping="/img/**" location="/statics/img/" cache-period="31556926"/>
    <mvc:resources mapping="/js/**" location="/statics/js/" cache-period="31556926"/>
    <mvc:resources mapping="/css/**" location="/statics/css/" cache-period="31556926"/>

    <!-- 加载 Velocity 配置文件 -->
    <bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <!-- 注意：这里配置velocity模板的位置，在viewResolver中不需要再配置，否则会出错 -->
        <property name="resourceLoaderPath" value="/WEB-INF/vm/"/>
        <property name="configLocation" value="classpath:conf/velocity.properties"/>
    </bean>

    <!-- 视图解析类，对模型视图民称的解析，对模型视图添加前后缀，适用于Velocity模板 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
        <!-- <property name="prefix">
                 <value>/WEB-INF/velocity/</value>
             </property>  -->
        <property name="suffix">
            <value>.vm</value>
        </property>
        <!-- 提供日期和数字的格式化 -->
        <property name="dateToolAttribute">
            <value>dateTool</value>
        </property>
        <property name="numberToolAttribute">
            <value>numberTool</value>
        </property>
        <!-- 将servlet中的Request和Session属性带入模板中，默认为false -->
        <property name="exposeRequestAttributes">
            <value>true</value>
        </property>
        <property name="exposeSessionAttributes">
            <value>true</value>
        </property>
    </bean>

    <!-- 处理JSON数据转换 -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
        <!-- 为了处理返回的JSON数据的编码，默认是ISO-88859-1的，这里把它设置为UTF-8,解决有乱码的情况 -->
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8"/>
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000"/>
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960"/>
    </bean>

    <!-- 配置基于Session的处理,将提交上来的locale参数进行处理
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"/>
    -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
    </bean>

    <!-- 国际化请求拦截器处理 -->
    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
    </mvc:interceptors>

    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="cacheSeconds" value="-1"/>
        <property name="basenames">
            <list>
                <value>/WEB-INF/languages/messages</value>
            </list>
        </property>
    </bean>

    <!-- 拦截器配置 -->
    <mvc:interceptors>
        <!-- session超时 -->
        <bean class="com.cnooc.core.interceptor.MemberContextInterceptor">
            <property name="loginUrl" value="/login" />
            <property name="excludeUrls">
                <list>
                    <value>/testApi*</value>
                    <value>/login*</value>
                    <value>/css*</value>
                    <value>/fonts*</value>
                    <value>/js*</value>
                    <value>/img*</value>
                </list>
            </property>
        </bean>

        <mvc:interceptor>
            <mvc:mapping path="/login" />
            <!-- 登录检查Interceptor -->
            <bean id="checkLoginInterceptor" class="com.cnooc.core.interceptor.CheckLoginInterceptor" />
        </mvc:interceptor>

    </mvc:interceptors>


</beans>